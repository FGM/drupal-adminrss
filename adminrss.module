<?php
// $Id$
/**
 * @file
 * Creator: James Blake <james at webgeer dot com>
 *
 * Drupal 5 and 6 versions: Frederic G. MARAND <fgm at osinet dot fr>
 *
 * Enables one to view unapproved nodes or comments using an RSS reader.
 *
 * This module was made a lot easier for me (webgeer) by both adminblock.module
 * and commentrss.module. Thanks to both Fredrik Jonsson and Gabor Hojtsy.
 *
 * @since DRUPAL-4-6
 * @license General Public License version 2.0 and later
 * @todo watchdog/logging feed
 */

require_once('adminrss_data.inc');

/**
 * Implementation of hook_help().
 *
 * @return string
 */
function adminrss_help($section, $args) {
  switch ($section) {
    case 'admin/modules#description':
      $ret = t('Provide an RSS feed for unapproved nodes and comments');
      break;

    default:
      $ret = NULL;
  }

  return $ret;
}

/**
 * Implementation of a 6.x equivalent of the 4.x hook_settings().
 */
function adminrss_admin_settings() {

  $key = variable_get(ADMINRSS_VAR_KEY, '');

  $form = array();
  $form[ADMINRSS_VAR_KEY] = array(
    '#type'          => 'textfield',
    '#title'         => t('Admin RSS Key'),
    '#required'      => TRUE,
    '#description'   => t('This is the key that will be required in order to get access to the admin RSS feeds.'),
    '#size'          => 50,
    '#maxlength'     => 255,
    '#default_value' => $key,
    '#weight'        => -5
    );

  if (!empty($key)) {
    $form['feeds'] = array(
      '#type'        => 'fieldset',
      '#title'       => t('Admin RSS Feeds locations'),
      '#description' => t('Copy and paste these links to your RSS aggregator.'),
      );
    $form['feeds']['links'] = array(
      '#type'        => 'markup',
      '#value'       => t('<ul><li>!nodefeed</li><li>!commentfeed</li></ul>',
        array(
          '!nodefeed'    => l(t('Nodes feed'),    ADMINRSS_PATH_HOME .'/node/'. $key),
          '!commentfeed' => l(t('Comments feed'), ADMINRSS_PATH_HOME .'/comment/'. $key)
        )
      ),
    );
  }

  $form[ADMINRSS_VAR_LINK_TYPE] = array(
    '#type'          => 'select',
    '#title'         => t('Comment feed links back to'),
    '#options'       => array(
      0 => t('Comment approval queue'),
      1 => t('Individual comment edit'),
      ),
    '#default_value' => variable_get(ADMINRSS_VAR_LINK_TYPE, 0),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_menu().
 */
function adminrss_menu() {
  $items = array();

  $items[ADMINRSS_PATH_HOME] = array(
    'title'           => 'Admin RSS Feed',
    'page callback'   => 'adminrss_handler',
    'access callback' => TRUE,
    'type'            => MENU_CALLBACK
  );
  $items[ADMINRSS_PATH_SETTINGS] = array(
    'title'            => 'Admin RSS Feed',
    'description'      => 'Configure access to the Admin RSS feeds.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('adminrss_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Page handler for admin RSS.
 *
 * If the $type is not set to either 'node' or 'comment' or the key is not set,
 * the function returns 401.
 *
 * @param string $type
 * @param string $key
 * @return void
 */
function adminrss_handler($type = NULL, $key = NULL) {
  if (isset($type) && isset($key) && ($key == variable_get(ADMINRSS_VAR_KEY, ''))) {
    if (in_array($type, array('node', 'comment'))) {
      if (call_user_func('adminrss_feed_'. $type)) {
        return;
      }
    }
  }
  else {
    //error must specify both a type and provide a key
    drupal_set_message(t('You must specify valid type and key information to access an AdminRSS feed.'), 'error');
    drupal_access_denied();
  }
}

/**
 * Output a node feed for nodes under moderation.
 *
 * @return string
 */
function adminrss_feed_node() {
  $sq = <<<EOT
  SELECT n.nid
  FROM {node} n
  INNER JOIN {users} u ON n.uid = u.uid
  WHERE n.status = 0 OR n.moderate = 1
  ORDER BY n.changed DESC
EOT;

  // No db_rewrite_sql: this feed is for admins only
  $q = db_query_range($sq, 0, 15);
  $nids = array();
  while ($o = db_fetch_object($q)) {
    $nids[] = $o->nid;
  }
  node_feed($nids, array('description' => t('Unapproved Nodes for Administration')));
}

/**
 * Output a comment feed for comments under moderation
 *
 * Items include a link to the comment on the node page and the node title,
 * to make it easier to check whether the comment is on topic.
 *
 * @return string
 */
function adminrss_feed_comment() {
  $sq = <<<EOT
    SELECT c.timestamp, c.subject, c.cid, c.nid, n.title, c.comment
    FROM {comments} c
      INNER JOIN {node} n ON c.nid = n.nid
    WHERE c.status = 1
    ORDER BY c.timestamp DESC
EOT;
  // No db_rewrite_sql: this feed is for admins only
  $result = db_query_range($sq, 0, 15);
  $items = '';
  $link_type = variable_get(ADMINRSS_VAR_LINK_TYPE, 0);
  while ($comment = db_fetch_object($result)) {
    switch ($link_type) {
      case 0: // approval queue
        $link = url('admin/content/comment/list/approval', array('absolute' => TRUE));
        break;

      case 1: // individual edit link
        $link = url('comment/edit/'. $comment->cid, array('absolute' => TRUE));
        // Old-style links below:
        // url("node/{$comment->nid}", NULL, "comment-{$comment->cid}", TRUE);
        break;

      default: // site home
        $link = base_path();
    }
    $content = t('Comment on node !node', array(
      '!node' => l($comment->title, 'node/'. $comment->nid, array(
        'fragment' => 'comment-'. $comment->cid,
    ))));
    if (!empty($comment->comment)) {
      $content .= " : \n" . filter_xss($comment->comment);
    }
    $items .= format_rss_item($comment->subject, $link, $content, array(
      'pubDate' => date('r', $comment->timestamp),
    ));
//  $comment = db_fetch_object($result)) {
//  $items[] = $comment->subject .' - '. format_date($comment->timestamp, 'medium') .'<br />['. l(t('node'), 'node/'. $comment->nid, array('title' => $comment->title)) .']|['. l(t('edit'), 'comment/edit/'. $comment->cid) .']|['. l(t('delete'), 'admin/comment/delete/'. $comment->cid) .']';
  }
  adminrss_format_feed($items, array('description' => t('Unapproved Comments for Administration')));
}

/**
 * Note this function was originally identical to the commentrss.module's
 * function commentrss_format_feed()
 *
 * @param array $items
 * @param array $channel
 * @return void
 */
function adminrss_format_feed($items, $channel = array()) {
  global $base_url;

  $languages = (function_exists('locale')
    ? locale_supported_languages()
    : array('name' => array('en' => 'English')));
  $channel_defaults = array(
    'version'     => '0.92',
    'title'       => variable_get('site_name', 'drupal') .' - '. t('Comments'),
    'link'        => $base_url,
    'description' => t('Comments'),
    'language'    => (($key = reset(array_keys($languages['name']))) ? $key : 'en')
  );
  $channel = array_merge($channel_defaults, $channel);

  $ret = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
    ."<!DOCTYPE rss [<!ENTITY % HTMLlat1 PUBLIC \"-//W3C//ENTITIES Latin 1 for XHTML//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml-lat1.ent\">]>\n"
    ."<rss version=\"". $channel["version"] ."\" xml:base=\"". $base_url ."\">\n"
    . format_rss_channel($channel['title'], $channel['link'], $channel['description'], $items, $channel['language'])
    ."</rss>\n";

  drupal_set_header('Content-Type: text/xml; charset=utf-8');
  print $ret;
}

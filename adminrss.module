<?php
/**
 * @file
 * Creator: James Blake <james at webgeer dot com>
 *
 * Drupal 5, 6, 7 and 8 versions: Frederic G. MARAND <fgm at osinet dot fr>
 *
 * Enables one to view pending items (node, comments, ...) using an RSS reader.
 *
 * This module was made a lot easier for me (webgeer) by both adminblock.module
 * and commentrss.module. Thanks to both Fredrik Jonsson and GÃ¡bor Hojtsy.
 *
 * @link http://drupal.org/project/adminblock
 * @link http://drupal.org/project/commentrss
 *
 * @since DRUPAL-4-6
 * @license General Public License version 2.0 and later
 */
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function adminrss_help($path, RouteMatchInterface $routeMatch) {
  switch ($path) {
    case 'help.page.adminrss':
      $types = implode(', ', array_map(function ($info) {
        return $info['title'];
      }, adminrss_get_feed_info()));
      $ret = t('Provide RSS feeds for administrative items: %types.', array('%types' => $types));
      break;

    default:
      $ret = NULL;
  }

  return $ret;
}

/**
 * Implements hook_menu().
 */
function adminrss_menu() {
  $type_offset = count(explode('/', ADMINRSS_PATH_HOME));

  $items[ADMINRSS_PATH_HOME . "/%adminrss_type/%"] = array(
    'title'           => 'Admin RSS Feed',
    'page callback'   => 'adminrss_page_feed',
    'page arguments'  => array($type_offset),
    'access callback' => TRUE,
    'type'            => MENU_CALLBACK,
    'load arguments' => array($type_offset + 1),
  );

  return $items;
}

/**
 * Page callback for admin RSS feeds.
 *
 * Access control and type validity is performed by the menu loader, so there is
 * no access or existence check to perform.
 *
 * @param string $feed_builder
 *   The name of the actual feed building function.
 *
 * @return mixed
 *   Feed builders are supposed to return on their own and exit, but they could
 *   return.
 */
function adminrss_page_feed($feed_builder) {
  return $feed_builder();
}

/**
 * Builds and outputs a RSS feed.
 *
 * @see node_feed()
 *
 * @param array $items
 *   An array of feed items in memory format.
 * @param array $channel
 *   An array of channel metadata.
 *
 * @return void
 *   Builder emits data and does not return any content.
 */
function adminrss_format_feed($items, $channel = array()) {
  global $base_url;

  $channel_defaults = array(
    'version'     => '2.0',
    'title'       => t('@site - AdminRSS Feed', array('@site' => variable_get('site_name', 'drupal'))),
    'link'        => $base_url,
    'description' => t('Items'),
    'language'    => language_default('language'),
  );
  $channel_extras = array_diff_key($channel, $channel_defaults);
  $channel = array_merge($channel_defaults, $channel);
  $cooked_channel = format_rss_channel($channel['title'], $channel['link'], $channel['description'], $items, $channel['language'], $channel_extras);
  $ret = <<<EOT
<!DOCTYPE rss [<!ENTITY % HTMLlat1 PUBLIC "-//W3C//ENTITIES Latin 1 for XHTML//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml-lat1.ent">]>
<rss version="{$channel["version"]}" xml:base="{$base_url}"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:dc="http://purl.org/dc/elements/1.1/">
  $cooked_channel
  </rss>
EOT;

  drupal_add_http_header('Content-Type', 'application/rss+xml; charset=utf-8');
  print $ret;
}

/**
 * Return information about existing Admin RSS feeds.
 *
 * @param bool $reset
 *   Reset the implementation cache ?
 *
 * @return array
 *   A machine-name-indexed hash of feed plugins.
 *     - only ony key: "configure", boolean: expose a configuration form.
 */
function adminrss_get_feed_info($reset = FALSE) {
  $manager = \Drupal::service('plugin.manager.adminrss.feed');
  return $manager->getDefinitions();
}

/**
 * Return the path for a given feed.
 *
 * @param string $name
 *   Machine name of the feed.
 *
 * @return string
 *   Internal path to the feed, secret key included in plain sight.
 */
function adminrss_get_feed_path($name) {
  $token = \Drupal::config(\Drupal\adminrss\AdminRss::CONFIG)
    ->get(\Drupal\adminrss\AdminRss::TOKEN);
  $ret = ADMINRSS_PATH_HOME . "/$name/$token";
  return $ret;
}

/**
 * Implements hook_adminrss_feed_info().
 */
function adminrss_adminrss_feed_info() {
  $ret = array(
    'comment' => array(
      'configure' => TRUE,
      'label' => t('Comments approval queue'),
    ),
    'node' => array(
      // 'configure' defaults to FALSE.
      'label' => t('Nodes feed'),
    ),
  );

  return $ret;
}
